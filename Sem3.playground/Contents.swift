import UIKit

//Создать массив [5, 6, -14, 25], а затем создать новую переменную с отсортированным по возрастанию ранее созданным массивом.

var a:[Int] = [5, 6, -14, 25]
var b = a.sorted { $0 < $1 }
print(b)
//Создать массив,  а затем создать переменную, в которой будет хранится ранее созданные массив, но в нем каждое значение должно быть увеличено на 5.
var c:[Int] =  [7, 6, 12, 43]
var d = c.map {$0 + 5}
print(d)
//Создать массив,  а затем создать переменную, в которой будет хранится ранее созданные массив, но в нем не должно быть ни отрицательных чисел, ни числа 12, а также каждое значение должно быть увеличено в 2 раза.
var e:[Int] = [8, 12, -5, 3]
var r = e.filter { $0 > 0 && $0 != 12}.map{ $0 * 2 }
print(r)

//Создать словарь, в котором ключ будет целым числом, а значение строкой

var voc = Dictionary <Int, String>()
var v1: [Int:String] = [:]

//Создать массив [2, 6, 25, 4, 2, 2, 10, 2], затем создать новую переменную, в которой будут те же значения, что и в ранее созданном массиве, но не должно быть повторяющихся значений.
var arr:[Int] = [2, 6, 25, 4, 2, 2, 10, 2]
var sort = Set(arr)
print(sort)

//Написать функцию, которая на вход принимает массив целых чисел, а возвращает true или false. true, если результат сложения всех чисел массива больше или равно 100, false, если меньше 100func
func isHund(value:[Int]) -> Bool{
    var sum = 0
    for element in value{
        sum += element
    }
    return sum < 100
}
print(isHund(value: [5, 7, 5, 2]))
//альтернатива a.reduce(0, +)
func ifMoreHundred(numbers: [Int]) -> Bool {
    let sum = numbers.reduce(0, +)
    return sum >= 100
}

//Создать переменную, в которой будет хранится замыкание, в которое передается словарь с ключом типа Int и значением типа String, а в ходе выполнения замыкания в консоль печатаются все значения словаря, ключ у которых больше 5
let cl = {(val:Dictionary <Int, String>) in
    for (key, value) in val{
        if key > 5 {
            print (value)}}
}
cl([5:"Hello", 6: "bye", 3: "no"])


//Создать перечисление, которое имеет в виде кейсов три вида чая: зеленый, черный и фруктовый. Затем создать словарь, в котором ключ это вид чая, а значение это стоимость и заполнить этот словарь.
enum Tea: String {
    case green = "Green tea"
    case black = "Black tea"
    case fruit = "Fruit tea"}

var v2: [Tea:Double] = [.green:15, .black:20, .fruit:30]

//Написать функцию, которая на вход принимает такой же словарь, как в задании 1, а возвращает новый, который создан по следующим правилам: у фруктового чая стоимость должна быть увеличена на 30%, у черного уменьшена в 1.6 раза, а у зеленого уменьшена на 9.5%
func newPrice(val:Dictionary<Tea, Double>) -> Dictionary<Tea, Double> {
    var v1: [Tea:Double] = [:]
    for (key, value) in val{
        switch key{
        case .fruit: v1.updateValue(value+value*0.3, forKey: key)
        case .green: v1.updateValue(value-value*0.095, forKey: key)
        case .black: v1.updateValue(value/1.6, forKey: key)
        }
    }
    return v1
}
print(newPrice(val:v2))

//Написать функцию, которая на вход принимает два целочисленных массива, которые содержат координаты начала и конца отрезка соответственно. Первый элемент массива это x, а второй y. Функция должна вернуть массив, который содержит координаты середины отрезка

func leghtCalc(a:[Int], b:[Int]) -> [Int]{
    guard a.count == 2 && b.count == 2 else {
        return []
    }
    return [(a[0] + b[0]) / 2, (a[1] + b[1]) / 2]
}

//Написать функцию, которая на вход принимает массив из 4 целых чисел (если чисел меньше или больше должно вернуться nil). Функция возвращает новый массив, который состоит из 3 элементов, первый элемент это первый элемент переданного массива, второй элемент это сумма второго и третьего элемента (индексы 1 и 2) переданного массива, последний элемент это последний элемент переданного массива. Также этот массив должен быть отсортирован по убыванию.

func caclulate (a:[Int]) -> [Int]? {
    guard a.count == 4 else {
        return nil
    }
    return [a[0], a[1]+a[2], a[2]].sorted { $0 > $1}
}

//Создайте массив, который состоит из всех целых чисел от 1 до 50
var arr1 = Array(1...50)

//Напишите замыкание, которое принимает на вход два целых числа и возвращает их сумму, затем вызовите это замыкание
let cl1 = { (b:Int, c:Int) in
    b+c}
print(cl1(4, 5))
//Напишите функцию, которая на вход будет принимать замыкание, которое на вход принимает целое число, но ничего не возвращает. Функция также не должна ничего возвращать. Внутри функции должен печататься тип замыкания
func test(a: (Int) -> Void){
    print(type(of: a))
}
//Создать массив и при помощи forEach вывести в консоль все значения
var someA = [5, 6, 3, 7]
someA.forEach{print($0)}
