import UIKit

//Создать массив [5, 6, -14, 25], а затем создать новую переменную с отсортированным по возрастанию ранее созданным массивом.

var a:[Int] = [5, 6, -14, 25]
var b = a.sorted { $0 < $1 }
print(b)
//Создать массив,  а затем создать переменную, в которой будет хранится ранее созданные массив, но в нем каждое значение должно быть увеличено на 5.
var c:[Int] =  [7, 6, 12, 43]
var d = c.map {$0 + 5}
print(d)
//Создать массив,  а затем создать переменную, в которой будет хранится ранее созданные массив, но в нем не должно быть ни отрицательных чисел, ни числа 12, а также каждое значение должно быть увеличено в 2 раза.
var e:[Int] = [8, 12, -5, 3]
var r = e.filter { $0 > 0 && $0 != 12}.map{ $0 * 2 }
print(r)

//Создать словарь, в котором ключ будет целым числом, а значение строкой

var voc = Dictionary <Int, String>()
var v1: [Int:String] = [:]

//Создать массив [2, 6, 25, 4, 2, 2, 10, 2], затем создать новую переменную, в которой будут те же значения, что и в ранее созданном массиве, но не должно быть повторяющихся значений.
var arr:[Int] = [2, 6, 25, 4, 2, 2, 10, 2]
var sort = Set(arr)
print(sort)

//Написать функцию, которая на вход принимает массив целых чисел, а возвращает true или false. true, если результат сложения всех чисел массива больше или равно 100, false, если меньше 100func
func isHund(value:[Int]) -> Bool{
    var sum = 0
    for element in value{
        sum += element
    }
    return sum < 100
}
print(isHund(value: [5, 7, 5, 2]))
//альтернатива a.reduce(0, +)

//Создать переменную, в которой будет хранится замыкание, в которое передается словарь с ключом типа Int и значением типа String, а в ходе выполнения замыкания в консоль печатаются все значения словаря, ключ у которых больше 5
let cl = {(val:Dictionary <Int, String>) in
    for (key, value) in val{
        if key > 5 {
            print (value)}}
}
cl([5:"Hello", 6: "bye", 3: "no"])
